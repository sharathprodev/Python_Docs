from typing import List
import pandas as pd

def createDataframe(student_data: List[List[int]]) -> pd.DataFrame:
    # Extracting columns from the 2D list
    student_ids = [row[0] for row in student_data]
    ages = [row[1] for row in student_data]

    # Creating a DataFrame
    df = pd.DataFrame({'student_id': student_ids, 'age': ages})

    return df

# Example usage:
student_data = [[1, 20], [2, 22], [3, 21], [4, 23]]
result_df = createDataframe(student_data)

print(result_df)

Certainly! Let's break down the code:

python
Copy code
from typing import List
import pandas as pd
from typing import List: This line imports the List type hint from the typing module. The List type is used to specify that a variable or parameter is expected to be a list.

import pandas as pd: This line imports the pandas library and gives it the alias pd for convenience. 
Pandas is a powerful library for data manipulation and analysis, and it provides the DataFrame class, 
which is used to represent tabular data.

python
Copy code
def createDataframe(student_data: List[List[int]]) -> pd.DataFrame:

This line defines a function named createDataframe that takes a parameter student_data, 
which is expected to be a list of lists containing integers. The function is annotated to return a pandas DataFrame.
python
Copy code
    # Extracting columns from the 2D list
    student_ids = [row[0] for row in student_data]
    ages = [row[1] for row in student_data]
These lines use list comprehensions to extract the student IDs and ages from the 2D list student_data. 
It assumes that each inner list contains two elements, 
where the first element is the student ID and the second element is the age.
python
Copy code
    # Creating a DataFrame
    df = pd.DataFrame({'student_id': student_ids, 'age': ages})
This line uses the pd.DataFrame constructor to create a DataFrame. It takes a dictionary as an argument, where keys are column names ('student_id' and 'age') and values are the corresponding lists (student_ids and ages).
python
Copy code
    return df
return df: This line returns the created DataFrame from the function.
python
Copy code
# Example usage:
student_data = [[1, 20], [2, 22], [3, 21], [4, 23]]
result_df = createDataframe(student_data)

print(result_df)
This section demonstrates an example usage of the createDataframe function. It creates a 2D list student_data with sample data and then calls the function with this data. The resulting DataFrame is stored in the variable result_df and printed. Adjust the student_data list with your actual data when testing the function.



import pandas as pd

def selectData(students: pd.DataFrame) -> pd.DataFrame:
    return students[students.student_id==101][['name','age']]
    
    select name,age from students
    Where student_id==101
    
def createBonusColumn(employees: pd.DataFrame) -> pd.DataFrame:
    employees['bonus'] = employees['salary']*2
    return employees
    
    update employees set empoyees.bonus=employees.salary*2 
    

def dropDuplicateEmails(customers: pd.DataFrame) -> pd.DataFrame:
    return customers.drop_duplicates(subset=['email'])

customers =
| customer_id | name    | email               |
| ----------- | ------- | ------------------- |
| 1           | Ella    | emily@example.com   |
| 2           | David   | michael@example.com |
| 3           | Zachary | sarah@example.com   |
| 4           | Alice   | john@example.com    |
| 5           | Finn    | john@example.com    |
| 6           | Violet  | alice@example.com   |
Output
| customer_id | name    | email               |
| ----------- | ------- | ------------------- |
| 1           | Ella    | emily@example.com   |
| 2           | David   | michael@example.com |
| 3           | Zachary | sarah@example.com   |
| 4           | Alice   | john@example.com    |
| 6           | Violet  | alice@example.com   |
Expected
| customer_id | name    | email               |
| ----------- | ------- | ------------------- |
| 1           | Ella    | emily@example.com   |
| 2           | David   | michael@example.com |
| 3           | Zachary | sarah@example.com   |
| 4           | Alice   | john@example.com    |
| 6           | Violet  | alice@example.com   |


def dropMissingData(students: pd.DataFrame) -> pd.DataFrame:
    return students[students['name'].notnull()]

students =
| student_id | name    | age |
| ---------- | ------- | --- |
| 32         | Piper   | 5   |
| 217        | null    | 19  |
| 779        | Georgia | 20  |
| 849        | Willow  | 14  |
Output
| student_id | name    | age |
| ---------- | ------- | --- |
| 32         | Piper   | 5   |
| 779        | Georgia | 20  |
| 849        | Willow  | 14  |
Expected
| student_id | name    | age |
| ---------- | ------- | --- |
| 32         | Piper   | 5   |
| 779        | Georgia | 20  |
| 849        | Willow  | 14  |


def modifySalaryColumn(employees: pd.DataFrame) -> pd.DataFrame:
    employees['salary'] *= 2
    return employees
    
    #update set salary = salary *2 
    
    
def renameColumns(students: pd.DataFrame) -> pd.DataFrame:
    students = students.rename(
        columns={
            "id": "student_id",
            "first": "first_name",
            "last": "last_name",
            "age": "age_in_years",
        }
    )
    return students
    
    #alter set column1=col_name_mod, col2=col_name_mod2...
    


def changeDatatype(students: pd.DataFrame) -> pd.DataFrame:
    students['grade'] = students['grade'].astype(int)
    return students
    
    #alter modify datatype
    
    

def fillMissingValues(products: pd.DataFrame) -> pd.DataFrame:
    products['quantity'] = products['quantity'].fillna(0)
    return products
    
    #update set quantity=0 where quantity is null
    
 
def concatenateTables(df1: pd.DataFrame, df2: pd.DataFrame) -> pd.DataFrame:
    return pd.concat([df1,df2])
    
    
 df1 =
| student_id | name    | age |
| ---------- | ------- | --- |
| 1          | Mason   | 8   |
| 2          | Ava     | 6   |
| 3          | Taylor  | 15  |
| 4          | Georgia | 17  |
df2 =
| student_id | name | age |
| ---------- | ---- | --- |
| 5          | Leo  | 7   |
| 6          | Alex | 7   |
Output
| student_id | name    | age |
| ---------- | ------- | --- |
| 1          | Mason   | 8   |
| 2          | Ava     | 6   |
| 3          | Taylor  | 15  |
| 4          | Georgia | 17  |
| 5          | Leo     | 7   |
| 6          | Alex    | 7   |


def pivotTable(weather: pd.DataFrame) -> pd.DataFrame:
    return weather.pivot(index='month', columns='city', values = 'temperature')
    
    
    weather =
| city         | month    | temperature |
| ------------ | -------- | ----------- |
| Jacksonville | January  | 13          |
| Jacksonville | February | 23          |
| Jacksonville | March    | 38          |
| Jacksonville | April    | 5           |
| Jacksonville | May      | 34          |
| ElPaso       | January  | 20          |
View more
Output
| month    | ElPaso | Jacksonville |
| -------- | ------ | ------------ |
| April    | 2      | 5            |
| February | 6      | 23           |
| January  | 20     | 13           |
| March    | 26     | 38           |
| May      | 43     | 34           |
Expected
| month    | ElPaso | Jacksonville |
| -------- | ------ | ------------ |
| April    | 2      | 5            |
| February | 6      | 23           |
| January  | 20     | 13           |
| March    | 26     | 38           |
| May      | 43     | 34           |



def meltTable(report: pd.DataFrame) -> pd.DataFrame:
    return report.melt(id_vars=['product'],var_name='quarter', value_name='sales')
    
    report =
| product     | quarter_1 | quarter_2 | quarter_3 | quarter_4 |
| ----------- | --------- | --------- | --------- | --------- |
| Umbrella    | 417       | 224       | 379       | 611       |
| SleepingBag | 800       | 936       | 93        | 875       |
Output
| product     | quarter   | sales |
| ----------- | --------- | ----- |
| Umbrella    | quarter_1 | 417   |
| SleepingBag | quarter_1 | 800   |
| Umbrella    | quarter_2 | 224   |
| SleepingBag | quarter_2 | 936   |
| Umbrella    | quarter_3 | 379   |
| SleepingBag | quarter_3 | 93    |
View more


def findHeavyAnimals(animals: pd.DataFrame) -> pd.DataFrame:
    return animals[
        animals['weight'] > 100
    ].sort_values(['weight'],ascending = False,
    )[['name']]
    
select name from animals where weight>100 order by DESC

   animals =
| name     | species | age | weight |
| -------- | ------- | --- | ------ |
| Tatiana  | Snake   | 98  | 464    |
| Khaled   | Giraffe | 50  | 41     |
| Alex     | Leopard | 6   | 328    |
| Jonathan | Monkey  | 45  | 463    |
| Stefan   | Bear    | 100 | 50     |
| Tommy    | Panda   | 26  | 349    |
Output
| name     |
| -------- |
| Tatiana  |
| Jonathan |
| Tommy    |
| Alex     |





Pandas: Data Series Exercise-1 with Solution
Write a  Pandas program to create and display a one-dimensional array-like object containing an array of data.

Sample Solution :
    import pandas as pd
ds = pd.Series([2, 4, 6, 8, 10])
print(ds)

Sample Output:

0     2                                                                
1     4                                                                
2     6                                                                
3     8                                                                
4    10                                                                
dtype: int64
Explanation:

ds = pd.Series([2, 4, 6, 8, 10]): The code creates a Pandas Series object named 'ds' which contains a sequence of five integers: 2, 4, 6, 8, and 10.

print(ds): This line prints the contents of the Series object to the console.

The numbers on the left-hand side are the index of each value in the Series, which by default starts at 0 and increases by 1 for each subsequent element. 
The ‘dtype’ indicates the data type of the values in the Series, in this case, 64-bit integers.



Pandas: Data Series Exercise-2 with Solution
Write a Pandas program to convert a Panda module Series to Python list and it’s type.

Sample Solution :

Python Code :

import pandas as pd
ds = pd.Series([2, 4, 6, 8, 10])
print("Pandas Series and type")
print(ds)
print(type(ds))
print("Convert Pandas Series to Python list")
print(ds.tolist())
print(type(ds.tolist()))
Sample Output:

Pandas Series and type                                                 
0     2                                                                
1     4                                                                
2     6                                                                
3     8                                                                
4    10                                                                
dtype: int64                                                           
<class 'pandas.core.series.Series'>                                    
Convert Pandas Series to Python list                                   
[2, 4, 6, 8, 10]                                                       
<class 'list'>                                                      
Explanation:

ds = pd.Series([2, 4, 6, 8, 10]): This code creates a Pandas Series object named 'ds' containing a sequence of five integers: 2, 4, 6, 8, and 10.

print(type(ds)): This statement prints the type of the 'ds' object using the type() function, which will be <class 'pandas.core.series.Series'>. This confirms that the object is indeed a Pandas Series.

print(ds.tolist()): This statement prints the contents of the Series object as a Python list using the tolist() method.


Pandas: Data Series Exercise-3 with Solution
Write a  Pandas program to add, subtract, multiple and divide two Pandas Series.

Sample Series: [2, 4, 6, 8, 10], [1, 3, 5, 7, 9]

Sample Solution :

 Python Code :

import pandas as pd
ds1 = pd.Series([2, 4, 6, 8, 10])
ds2 = pd.Series([1, 3, 5, 7, 9])
ds = ds1 + ds2
print("Add two Series:")
print(ds)
print("Subtract two Series:")
ds = ds1 - ds2
print(ds)
print("Multiply two Series:")
ds = ds1 * ds2
print(ds)
print("Divide Series1 by Series2:")
ds = ds1 / ds2
print(ds)
Sample Output:

Add two Series:                                                        
0     3                                                                
1     7                                                                
2    11                                                                
3    15                                                                
4    19                                                                
dtype: int64                                                           
Subtract two Series:                                                   
0    1                                                                 
1    1                                                                 
2    1                                                                 
3    1                                                                 
4    1                                                                 
dtype: int64                                                           
Multiply two Series:                                                   
0     2                                                                
1    12                                                                
2    30                                                                
3    56         
4    90                                                                
dtype: int64                                                           
Divide Series1 by Series2:                                             
0    2.000000                                                          
1    1.333333                                                          
2    1.200000                                                          
3    1.142857                                                          
4    1.111111                                                          
dtype: float64                                                         
Explanation:

Following code creates two Pandas Series objects named 'ds1' and 'ds2' containing a sequence of five integers each:

ds1 = [2, 4, 6, 8, 10]
ds2 = [1, 3, 5, 7, 9]
ds = ds1 + ds2: This line adds the two Series objects element-wise, resulting in a new Series object 'ds' with the values [3, 7, 11, 15, 19].
ds = ds1 - ds2: This line subtracts the second Series object from the first Series object element-wise, resulting in a new Series object 'ds' with the values [1, 1, 1, 1, 1].
ds = ds1 * ds2: This line multiplies the two Series objects element-wise, resulting in a new Series object 'ds' with the values [2, 12, 30, 56, 90].
ds = ds1 / ds2: This line divides the first Series object by the second Series object element-wise, resulting in a new Series object 'ds' with the values [2.0, 1.333, 1.2, 1.143, 1.111].

Pandas: Data Series Exercise-4 with Solution
Write a  Pandas program to compare the elements of the two Pandas Series.

Sample Series: [2, 4, 6, 8, 10], [1, 3, 5, 7, 10]

Sample Solution:

 Python Code :

import pandas as pd
ds1 = pd.Series([2, 4, 6, 8, 10])
ds2 = pd.Series([1, 3, 5, 7, 10])
print("Series1:")
print(ds1)
print("Series2:")
print(ds2)
print("Compare the elements of the said Series:")
print("Equals:")
print(ds1 == ds2)
print("Greater than:")
print(ds1 > ds2)
print("Less than:")
print(ds1 < ds2)
Sample Output:

Series1:                                                               
0     2                                                                
1     4                                                                
2     6                                                                
3     8                                                                
4    10                                                                
dtype: int64                                                           
Series2:                                                               
0     1                                                                
1     3                                                                
2     5                                                                
3     7                                                                
4    10                                                                
dtype: int64                                                           
Compare the elements of the said Series:                               
Equals:                                                                
0    False                                                             
1    False                                                             
2    False
3    False                                                             
4     True                                                             
dtype: bool                                                            
Greater than:                                                          
0     True                                                             
1     True                                                             
2     True                                                             
3     True                                                             
4    False                                                             
dtype: bool                                                            
Less than:                                                             
0    False                                                             
1    False                                                             
2    False                                                             
3    False                                                             
4    False                                                             
dtype: bool                                             
Explanation:

The above exercise demonstrates how to perform element-wise comparison operations between two Pandas Series objects using Python's comparison operators.

Following code creates two Pandas Series objects named 'ds1' and 'ds2' containing a sequence of five integers each:

ds1 = [2, 4, 6, 8, 10]
ds2 = [1, 3, 5, 7, 10]
print(ds1 == ds2): This line compares the two Series objects using the '==' operator, resulting in a new Series object with boolean values indicating whether the corresponding elements in ‘ds1’ and ‘ds2’ are equal or not. The output will be: [False, False, False, False, True]

print(ds1 > ds2): This line compares the two Series objects using the '>' operator, resulting in a new Series object with boolean values indicating whether the corresponding elements in ‘ds1’ are greater than those in ‘ds2’ or not. The output will be: [True, True, True, True, False]

print(ds1 < ds2): This line compares the two Series objects using the '<' operator, resulting in a new Series object with boolean values indicating whether the corresponding elements in ‘ds1’ are less than those in ‘ds2’ or not. The output will be: [False, False, False, False, False]



Pandas: Data Series Exercise-5 with Solution
Write a  Pandas program to convert a dictionary to a Pandas series.

Sample dictionary: d1 = {'a': 100, 'b': 200, 'c':300, 'd':400, 'e':800}

Sample Solution :

 Python Code :

import pandas as pd
d1 = {'a': 100, 'b': 200, 'c':300, 'd':400, 'e':800}
print("Original dictionary:")
print(d1)
new_series = pd.Series(d1)
print("Converted series:")
print(new_series)
Sample Output:

Original dictionary:
{'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 800}
Converted series:
a    100
b    200
c    300
d    400
e    800
dtype: int64                                 
Explanation:

In the above example –

d1 = {'a': 100, 'b': 200, 'c':300, 'd':400, 'e':800}: This line creates a Python dictionary 'd1' with five key-value pairs. Each key is a string ('a', 'b', 'c', 'd', 'e') and each value is an integer.

new_series = pd.Series(d1): This line creates a new Pandas Series object 'new_series' from the dictionary 'd1' using the pd.Series() constructor. 
The resulting Series object will have the same keys as the dictionary and the corresponding values as its elements.


Pandas: Data Series Exercise-6 with Solution
Write a  Pandas program to convert a  NumPy array to a Pandas series.
Sample NumPy array: d1 = [10, 20, 30, 40, 50]
Sample Solution :

Python Code :

import numpy as np
import pandas as pd
np_array = np.array([10, 20, 30, 40, 50])
print("NumPy array:")
print(np_array)
new_series = pd.Series(np_array)
print("Converted Pandas series:")
print(new_series)
Sample Output:

  NumPy array:
[10 20 30 40 50]
Converted Pandas series:
0    10
1    20
2    30
3    40
4    50
dtype: int64                               
Explanation:

np.array([10, 20, 30, 40, 50]): This code creates a NumPy array 'np_array' containing a sequence of five integers: [10, 20, 30, 40, 50].

new_series = pd.Series(np_array): This line creates a new Pandas Series object 'new_series' from the NumPy array using the pd.Series() constructor. 
The resulting Series object will have the same values as the NumPy array, and the default index will be assigned to each element starting from 0 and increasing by 1 for each subsequent element.


Pandas: Data Series Exercise-7 with Solution
Write a Pandas program to change the data type of given a column or a Series.

Sample Series:
Original Data Series:
0 100
1 200
2 python
3 300.12
4 400
dtype: object
Change the said data type to numeric:
0 100.00
1 200.00
2 NaN
3 300.12
4 400.00
dtype: float64

Sample Solution :

Python Code :

import pandas as pd
s1 = pd.Series(['100', '200', 'python', '300.12', '400'])
print("Original Data Series:")
print(s1)
print("Change the said data type to numeric:")
s2 = pd.to_numeric(s1, errors='coerce')
print(s2)
Sample Output:

Original Data Series:
0       100
1       200
2    python
3    300.12
4       400
dtype: object
Change the said data type to numeric:
0    100.00
1    200.00
2       NaN
3    300.12
4    400.00
dtype: float64                              
Explanation:

s1 = pd.Series(['100', '200', 'python', '300.12', '400']): This line creates a Pandas Series object 's1' containing a sequence of five string values: ['100', '200', 'python', '300.12', '400'].

s2 = pd.to_numeric(s1, errors='coerce'): This line applies the pd.to_numeric() function to the Series object 's1' with the 'errors' parameter set to 'coerce'. This function attempts to convert each value in the Series object to a numeric type (e.g., integer or float). If a value cannot be converted, it will be replaced with a NaN (not a number) value.

value in the Series object to a numeric type (e.g., integer or float). If a value cannot be converted, it will be replaced with a NaN (not a number) value.
